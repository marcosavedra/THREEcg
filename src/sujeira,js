import './style.css'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import {GLTFLoader} from "three/examples/jsm/loaders/GLTFLoader.js";
import * as dat from 'dat.gui'
import { CameraHelper, DirectionalLight } from 'three';

//Var's
let cloud

//Loader
const loader = new GLTFLoader();

// Load a glTF resource -> Base: By The North
loader.load(
    // resource URL
    'byTheNorth.gltf',
    // called when the resource is loaded
    function ( gltf ) {

        const root = gltf.scene
        root.traverse(function(model) {
            if(model.isMesh){
                model.castShadow = true;
                model.receiveShadow = true;
            }
            model.getObjectByName()
        
        })
        root.position.set(0,6,0)
        const scale = 1.3
        root.rotateY(1.5708)
        root.scale.set(scale, scale , scale)
        scene.add( root );

    },
    // called while loading is progressing
    function ( xhr ) {

        console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

    },
    // called when loading has errors
    function ( error ) {

        console.log( 'An error happened' );

    }
);

// Load a glTF resource -> Cloud
loader.load(
    // resource URL
    'cloud.gltf',
    // called when the resource is loaded
    function ( gltf ) {

        const root = gltf.scene
        root.traverse(function(model) {
            if(model.isMesh){
                model.castShadow = true;
                model.receiveShadow = false;
            }
        
        })
        root.position.set(0,30,43)
        const scale = 2.25
        root.rotateY(1.5708)
        root.scale.set(scale, scale , scale)
        cloud = root
        console.log(root.getWorldPosition())
        scene.add( root );

    },
    // called while loading is progressing
    function ( xhr ) {

        console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

    },
    // called when loading has errors
    function ( error ) {

        console.log( 'An error happened' );

    }
);

// Load a glTF resource -> Man
loader.load(
    // resource URL
    'man.gltf',
    // called when the resource is loaded
    function ( gltf ) {

        const root = gltf.scene
        root.traverse(function(model) {
            if(model.isMesh){
                model.castShadow = true;
                model.receiveShadow = false;
            }
        
        })
        root.position.set(-2.7,9.4,64)
        const scale = 1.3
        root.rotateY(-1.1)
        root.scale.set(scale, scale , scale)
        scene.add( root );

    },
    // called while loading is progressing
    function ( xhr ) {

        console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

    },
    // called when loading has errors
    function ( error ) {

        console.log( 'An error happened' );

    }
);

// Debug
const gui = new dat.GUI()

// Canvas
const canvas = document.querySelector('canvas.webgl')

// Scene
const scene = new THREE.Scene()

// Objects
// Materials
// Mesh

// Lights
// Light 1
const ambientLight = new THREE.AmbientLightProbe(0x858585, 2.5)
scene.add(ambientLight)
// gui.add(ambientLight, 'intensity').min(0).max(10).step(0.1)

//Light 2
const pointLight = new THREE.PointLight(0xc9671c, 3)
pointLight.position.set(-16,36,32)
pointLight.castShadow = true
pointLight.shadow.bias = -0.0004

// gui.add(pointLight.position, 'x').min(-100).max(100).step(1)
// gui.add(pointLight.position, 'y').min(-100).max(100).step(1)
// gui.add(pointLight.position, 'z').min(-100).max(100).step(1)

scene.add(pointLight)

const helper = new THREE.PointLightHelper(pointLight, 1)
scene.add(helper)

//Light 3
const pointLight2 = new THREE.PointLight(0x808eff, 0.6)
pointLight2.position.set(0,60,67)
pointLight2.castShadow = true
pointLight2.shadow.bias = -0.0004

scene.add(pointLight2)

const helper2 = new THREE.PointLightHelper(pointLight2, 1)
scene.add(helper2)



//Light 3
// const pointLight3 = new THREE.pointLight(0x96ff, 2)
// pointLight3.position.set(2.13,-3,-1.98)
// pointLight3.intensity = 10
// scene.add(pointLight3)

// const light3 = gui.addFolder('Light 3')

// light3.add(pointLight3.position, 'x').min(-3).max(3).step(0.1)
// light3.add(pointLight3.position, 'y').min(-6).max(6).step(0.1)
// light3.add(pointLight3.position, 'z').min(-3).max(3).step(0.1)
// light3.add(pointLight3, 'intensity').min(0).max(10).step(0.1)

// const light3color = {
//    color: 0x96ff
// }

// light3.addColor(light3color, 'color').onChange(() => {
//     pointLight3.color.set(light3color.color)})



/**
 * Sizes
 */
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}

window.addEventListener('resize', () =>
{
    // Update sizes
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight

    // Update camera
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()

    // Update renderer
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
})

/**
 * Camera
 */
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 120)
camera.position.set(-35,32,110)

scene.add(camera)
// gui.add(camera.position, 'x').min(-200).max(200).step(1)
// gui.add(camera.position, 'y').min(-200).max(200).step(1)
// gui.add(camera.position, 'z').min(-200).max(200).step(1)


// Controls
const controls = new OrbitControls(camera, canvas)
controls.enableDamping = true

/**
 * Renderer
 */
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
})
renderer.shadowMap.enabled = true;
renderer.setSize(sizes.width, sizes.height);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
renderer.setClearColor( 0xaddaff, 1);


/**
 * Animate
 */
// document.addEventListener('mousemove', onDocumentMouseMove)

// let mouseX = 0;
// let mouseY = 0;
// let targetX = 0;
// let targetY = 0;

// const windowsHalfX = window.innerWidth / 2;
// const windowsHalfY = window.innerHeight / 2;

// function onDocumentMouseMove(event){
//     mouseX = (event.clientX - windowsHalfX)
//     mouseY = (event.clientY - windowsHalfY)
// }

const clock = new THREE.Clock()

let moveSpeed = 0.08


const tick = () =>
{
    // Update objects
    if(cloud){
        if(cloud.position.z >= 43)
        {
            moveSpeed *= -1
        }
        if(cloud.position.z <= 68)
        {
            moveSpeed *= -1
        }
        cloud.position.z += moveSpeed
    }
    // targetX = mouseX * .001
    // targetY = mouseY * .001

    const elapsedTime = clock.getElapsedTime()

    // Update objects
    // sphere.rotation.y = .5 * elapsedTime

    // sphere.rotation.x += .05 * (targetY - sphere.rotation.x)
    // sphere.rotation.y += .5 * (targetX - sphere.rotation.y)
    // sphere.rotation.z += .05 * (targetY - sphere.rotation.x)
    

    //Update Orbital Controls
    controls.update()

    // Render
    renderer.render(scene, camera)

    // Call tick again on the next frame
    window.requestAnimationFrame(tick)
}

tick()